@page "/añadirViaje"
@page "/editarViaje/{id:int}"
@inject IServicioRuta servicioRuta
@inject IServicioCiudad servicioCiudad
@inject IServicioProvincia servicioProvincia
@inject IServicioViaje servicioViaje
@inject IServicioChofer servicioChofer
@inject IServicioCombi servicioCombi
@inject NavigationManager navigationManager
@attribute [Authorize(Roles = "Admin")]

<div tabindex="-1" style="display:block" role="dialog">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h1>Datos del viaje</h1>
            </div>
            <div class="modal-body">
                <EditForm Model="@viaje" OnValidSubmit="Guardar">
                    <DataAnnotationsValidator />
                    <table class="table">
                        <tr>
                            <td>Ruta</td>
                            <td>
                                <InputSelect class="form-control" @bind-Value="@viaje.IdRuta">
                                    @if (rutas.Count() > 0)
                                    {
                                        <option value="">Seleccione una ruta</option>
                                        @foreach (Ruta item in rutas)
                                        {
                                            obtenerCiudadProvincia(item.Id);
                                            <option value="@item.Id">@ciudad1.Nombre, @tipoProvincia1.Nombre  -  @ciudad2.Nombre, @tipoProvincia2.Nombre - @item.HsSalida.ToString("HH:mm")</option>
                                        }
                                    }
                                    else
                                    {
                                        <option value="" disabled>No hay rutas en el sistema</option>
                                    }
                                </InputSelect>
                            </td>
                            <td colspan="2"> <ValidationMessage For="@( () => viaje.IdRuta)" /></td>
                        </tr>
                        <tr>
                            <td>Fecha Salida</td>
                            <td><input type="date" min="@Date" @bind="viaje.FechaSalida" /></td>
                            <td colspan="2"> <ValidationMessage For="@( () => viaje.FechaSalida)" /></td>
                        </tr>
                        <tr>
                            <td>Precio</td>
                            <td><input type="number" step="0.01" @bind="viaje.Precio" /></td>
                        </tr>
                        <tr>
                            <td colspan="2" style="text-align:center">
                                <button type="submit" class="btn btn-outline-primary" value="Guardar">Guardar</button>
                                <button type="button" class="btn btn-outline-secondary" @onclick="Cancelar">Cancelar</button>
                            </td>
                        </tr>
                        <tr>
                            <td><h6 style="color:red">@Message</h6></td>
                        </tr>
                    </table>
                </EditForm>
                <div>
                </div>
            </div>
        </div>
    </div>
</div>




@code { 
    [Parameter]
    public int id { get; set; }
    Viaje viaje = new Viaje();
    public IEnumerable<Ruta> rutas = new List<Ruta>();
    public IEnumerable<Viaje> viajes = new List<Viaje>();
    private IEnumerable<Ciudad> ciudades = new List<Ciudad>();
    private IEnumerable<Provincia> provincias = new List<Provincia>();
    Ciudad ciudad1 = new Ciudad(), ciudad2 = new Ciudad();
    Ruta tipoRuta = new Ruta();
    Provincia tipoProvincia1 = new Provincia(), tipoProvincia2 = new Provincia();
    public string Message = "";
    public string Date { get; set; } = DateTime.Today.ToString("yyyy-MM-dd");
    int aux;



    protected async override Task OnInitializedAsync()
    {
        try
        {
            rutas = await servicioRuta.ObtenerTodos();
            ciudades = await servicioCiudad.ObtenerTodos();
            provincias = await servicioProvincia.ObtenerTodos();
            viajes = await servicioViaje.ObtenerTodos();
        }
        catch (Exception ex)
        {
            Message = "Algo salio mal... " + ex.Message;
        }


        if (id > 0) //If no Id has been passed, then it is a new Category
        {
            viaje = await servicioViaje.Obtener(id);
            aux = viaje.IdRuta;
        }
    }

    public async Task<bool> existe(int idR, DateTime fecha)
    {
        Viaje viaje = await servicioViaje.Obtener(idR, fecha);
        return viaje != null;
    }

    public async Task Guardar()
    {
        Ruta r = await servicioRuta.Obtener(viaje.IdRuta);
        Combi combi = await servicioCombi.Obtener(r.IdCombi);
        AspNetUsersDto chofer = await servicioChofer.Obtener(combi.IdChofer);
        Viaje hayViaje= await servicioViaje.ViajeEnFecha(chofer.IdAux, viaje.FechaSalida);
        bool mismo = await existe(viaje.IdRuta, viaje.FechaSalida);
        if (aux == viaje.IdRuta || hayViaje == null && !mismo)
        {
            if (id == 0)
                viaje.Asientos = combi.Asientos;
            await servicioViaje.Guardar(viaje);
            if (viaje.Id == 0)
            {
                navigationManager.NavigateTo("/viajes");
            }
            else
                navigationManager.NavigateTo($"/perfilviaje/{viaje.Id}");
        }
        else
        {
            if (mismo)
                Message = "ya existe el destino seleccionado para esa fecha";
            else if (hayViaje !=null)
                Message = "El chofer ya tiene un viaje asignado en la fecha ingresada";
            navigationManager.NavigateTo($"/editarViaje/{id}");
        }
    }

    public void Cancelar()
    {
        navigationManager.NavigateTo("/viajes");
    }

    protected void obtenerCiudadProvincia(int v1)
    {
        foreach (Ruta ruta in rutas)
        {
            if (ruta.Id == v1)
            {
                tipoRuta = ruta;
                break;
            }
        }
        foreach (Ciudad ciudad in ciudades)
        {
            if (ciudad.Id == tipoRuta.IdCiudad1)
            {
                ciudad1 = ciudad;
                foreach (Provincia provincia in provincias)
                {
                    if (provincia.Id == ciudad.IdProvincia)
                    {
                        tipoProvincia1 = provincia;
                        break;
                    }
                }
            }
        }
        foreach (Ciudad ciudad in ciudades)
        {
            if (ciudad.Id == tipoRuta.IdCiudad2)
            {
                ciudad2 = ciudad;
                foreach (Provincia provincia in provincias)
                {
                    if (provincia.Id == ciudad.IdProvincia)
                    {
                        tipoProvincia2 = provincia;
                        break;
                    }
                }
            }
        }
    } }
